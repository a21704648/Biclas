package org.biclas.station.ws.cli;

import java.io.IOException;
import java.util.Map;
import java.util.Scanner;

import javax.xml.ws.BindingProvider;

import org.biclas.station.ws.BadInit_Exception;
import org.biclas.station.ws.NoBiclaAvail_Exception;
import org.biclas.station.ws.NoSlotAvail_Exception;
import org.biclas.station.ws.StationPortType;
import org.biclas.station.ws.StationService;
import org.biclas.station.ws.StationView;

import com.sun.xml.ws.api.EndpointAddress;

import pt.ulusofona.ws.uddi.UDDINaming;
import pt.ulusofona.ws.uddi.UDDINamingException;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
// TODO implement Port Type interface
public class StationClient implements StationPortType {

	/** WS service */
	StationService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	StationPortType port = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsName = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL

	public String getWsURL() {
		return wsURL;
	}

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public StationClient(String wsURL) throws StationClientException {
		this.wsURL = wsURL;
		setVerbose(true);
		createStub();
	}

	/** constructor with provided UDDI location and name 
	 * @throws UDDINamingException */
	public StationClient(String uddiURL, String wsName) throws StationClientException, UDDINamingException {
		this.uddiURL = uddiURL;
		this.wsName = wsName;
		uddiLookup();
		createStub();
	}

	/** UDDI lookup 
	 * @return 
	 * @throws UDDINamingException */
	private void uddiLookup() throws StationClientException, UDDINamingException {
		//********* Acrescentado pelo grupo
		System.out.printf("Contacting UDDI at %s%n", uddiURL);
		UDDINaming uddiNaming = new UDDINaming(uddiURL);
		
		String endpointAddress = uddiNaming.lookup(this.wsName);

		if (endpointAddress == null) {
			System.out.println("Not found!");
			return;
		} else {
			System.out.printf("Found %s%n", endpointAddress);
		}
		//********* Fim Acrescentado pelo grupo
	}


	/** Stub creation and configuration */
	private void createStub () {
		if (verbose)
			//s-client -> cliente servidor
			System.out.println("Creating stub from s-client...");
		//TODO
		//********* Acrescentado pelo grupo
		
		//********* Fim Acrescentado pelo grupo
		service = new StationService();
		port = service.getStationPort();
		
		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address from s-client...");
			
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

	// remote invocation methods ----------------------------------------------
	
	// Descomentado
	@Override
	public StationView getInfo() {
		return port.getInfo();
	}
	// Descomentado
	@Override
	public void getBicla() throws NoBiclaAvail_Exception {
		port.getBicla();
	}
	// Descomentado
	@Override
	public int returnBicla() throws NoSlotAvail_Exception {
		return port.returnBicla();
	}
	
	// test control operations ------------------------------------------------

	// Descomentado
	@Override
	public String testPing(String inputMessage) {
		return port.testPing(inputMessage);
	}
	// Descomentado
	@Override
	public void testClear() {
		port.testClear();
	}
	// Descomentado
	@Override
	public void testInit(int x, int y, int capacity, int returnPrize) throws BadInit_Exception {
		port.testInit(x, y, capacity, returnPrize);
	}

}
