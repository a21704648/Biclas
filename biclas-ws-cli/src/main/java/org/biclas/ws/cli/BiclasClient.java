package org.biclas.ws.cli;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import javax.xml.ws.BindingProvider;

import org.biclas.ws.AlreadyHasBicla_Exception;
import org.biclas.ws.BadInit_Exception;
import org.biclas.ws.BiclasPortType;
import org.biclas.ws.BiclasService;
import org.biclas.ws.CoordinatesView;
import org.biclas.ws.EmailExists_Exception;
import org.biclas.ws.FullStation_Exception;
import org.biclas.ws.InvalidEmail_Exception;
import org.biclas.ws.InvalidStation_Exception;
import org.biclas.ws.NoBiclaAvail_Exception;
import org.biclas.ws.NoBiclaRented_Exception;
import org.biclas.ws.NoCredit_Exception;
import org.biclas.ws.StationView;
import org.biclas.ws.UserNotExists_Exception;
import org.biclas.ws.UserView;

import pt.ulusofona.ws.uddi.UDDINaming;
import pt.ulusofona.ws.uddi.UDDINamingException;

/**
 * Client.
 *
 * Adds easier endpoint address configuration and
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class BiclasClient  implements BiclasPortType {

	Scanner input = new Scanner(System.in);
	
	private UserView user = null;
    /** WS service */
	BiclasService service = null;

    /** WS port (port type is the interface, port is the implementation) */
	BiclasPortType port = null;
	
    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL
    
    
    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public BiclasClient(String wsURL) throws BiclasClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name 
     * @throws UDDINamingException */
    public BiclasClient(String uddiURL, String wsName) throws BiclasClientException, UDDINamingException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }

    /** UDDI lookup 
     * @throws UDDINamingException */
    private void uddiLookup() throws BiclasClientException, UDDINamingException {
    	//********* Acrescentado pelo grupo
		System.out.printf("Contacting UDDI at %s%n", uddiURL);
		UDDINaming uddiNaming = new UDDINaming(uddiURL);
		
		String endpointAddress = uddiNaming.lookup(this.wsName);

		if (endpointAddress == null) {
			System.out.println("Not found!");
			return;
		} else {
			System.out.printf("Found %s%n", endpointAddress);
		}
		//********* Fim Acrescentado pelo grupo
    }

    /** Stub creation and configuration */
    private void createStub() {
		if (verbose)
		//b-client -> cliente servidor
		System.out.println("Creating stub from b-client...");
		 service = new BiclasService();
		 port = service.getBiclasPort();
		
		 if (wsURL != null) {
		 if (verbose)
		 System.out.println("Setting endpoint address from b-client...");
		 BindingProvider bindingProvider = (BindingProvider) port;
		 Map<String, Object> requestContext = bindingProvider
		 .getRequestContext();
		 requestContext.put(bindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsURL);
		 }
    }

	// remote invocation methods ----------------------------------------------

	 @Override
	 public UserView activateUser(String email) throws EmailExists_Exception,
		 InvalidEmail_Exception {
		 return port.activateUser(email);
	 }
	
	 @Override
	 public StationView getInfoStation(String stationId) throws
		 InvalidStation_Exception {
		 return port.getInfoStation(stationId);
	 }
	
	 @Override
	 public List<StationView> listStations(Integer numberOfStations,
		 CoordinatesView coordinates) {
		 return port.listStations(numberOfStations,coordinates);
	 }
	
	 @Override
	 public void rentBicla(String stationId, String email) throws
		 AlreadyHasBicla_Exception, InvalidStation_Exception,
		 NoBiclaAvail_Exception, NoCredit_Exception, UserNotExists_Exception {
		 port.rentBicla(stationId,email);
	 }
	
	 @Override
	 public void returnBicla(String stationId, String email)
		 throws FullStation_Exception, InvalidStation_Exception,
		 NoBiclaRented_Exception, UserNotExists_Exception {
		 port.returnBicla(stationId,email);
	 }
	
	 @Override
	 public int getCredit(String email) throws UserNotExists_Exception {
		 return port.getCredit(email);
	 }

	//********* Acrescentado pelo grupo
	public void selecionarOperacao() throws IOException, InvalidStation_Exception, EmailExists_Exception, InvalidEmail_Exception, UserNotExists_Exception {
		System.out.println("\n|-|************************************************|-|");
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-|Selecione uma operação:                         |-|");
		System.out.println("|-|[1] - Ativar utilizador                         |-|");
		System.out.println("|-|[2] - Obter informação                          |-|");
		System.out.println("|-|[3] - Listar estações                           |-|");
		System.out.println("|-|[4] - Levantar bicicleta                        |-|");
		System.out.println("|-|[5] - Entregar bicicleta                        |-|");
		System.out.println("|-|[6] - Consultar saldo                           |-|");
		System.out.println("|-|[7] - Sair                                      |-|");
		System.out.println("|-|------------------------------------------------|-|");
		System.out.print("|-|Operação: ");
		String operacao = input.nextLine();
		escolherOperacao(operacao);
	}
	
	private void escolherOperacao(String operacao) throws IOException, InvalidStation_Exception, EmailExists_Exception, InvalidEmail_Exception, UserNotExists_Exception{
		switch(operacao) {
			case "\n": selecionarOperacao();
				break;
			case "1":	ativarUtilizador();
				break;
			case "2": obterInfo();
				break;
			case "3":	listarEstacoes();
				break;
			case "4":	 try {
				levantarBicla();
			} catch (AlreadyHasBicla_Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoBiclaAvail_Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoCredit_Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				break;
			case "5":	 try {
				entregarBicla();
			} catch (AlreadyHasBicla_Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoBiclaAvail_Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoCredit_Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
			case "6":	 if(this.user != null) {
				obterSaldo();
			} else {
				System.out.println("|-|------------------------------------------------|-|"); 
				System.out.println("|-| Regista-se no sistema.");
				System.out.println("|-|------------------------------------------------|-|");
				selecionarOperacao();
			}
				
				
			break;
			case "7":	 
				System.out.println("|-|------------------------------------------------|-|"); 
				System.out.println("|-| Cliente Biclas saiu.");
				System.out.println("|-|------------------------------------------------|-|");
				System.exit(0);
			break;
			default:	System.out.println("|-|------------------------------------------------|-|"); 
						System.out.println("|-| Operação invalida. Tente novamente!");
						System.out.println("|-|------------------------------------------------|-|");
						selecionarOperacao();
		}
			
	}
	
/*	public void falta() throws IOException, InvalidStation_Exception, EmailExists_Exception, InvalidEmail_Exception, UserNotExists_Exception {
		System.out.println("|-|------------------------------------------------|-|"); 
		System.out.println("|-| Na fase de desenvolvimento. Tente outra opcao!");
		System.out.println("|-|------------------------------------------------|-|");
		selecionarOperacao();
		
	}*/
	
	public void ativarUtilizador() throws EmailExists_Exception, InvalidEmail_Exception, IOException, InvalidStation_Exception, UserNotExists_Exception {
		System.out.println("|-|------------------------------------------------|-|");
		System.out.print("|-|Email: ");
		String email = input.nextLine();
		//chamar o serviço
		UserView uv = port.activateUser(email);
		//associar utilizador ao browser
        this.user = uv;
		
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-| User \"" + uv.getEmail() + "\" ativado com sucesso.");
		System.out.println("|-|------------------------------------------------|-|");
		this.user.setHasBicla(false);
		selecionarOperacao();
	}
	
	public void obterInfo() throws IOException, InvalidStation_Exception, EmailExists_Exception, InvalidEmail_Exception, UserNotExists_Exception {

		System.out.println("|-|------------------------------------------------|-|");
		System.out.print("|-|Nome estação: ");
		String idStation = input.nextLine();
		
	    StationView sv = port.getInfoStation(idStation);
	    if(sv == null) {
	    	System.out.println("|-|------------------------------------------------|-|");
			System.out.println("|-| Estação invalida. Tente novamente.");
			System.out.println("|-|------------------------------------------------|-|");
			selecionarOperacao();
	    }
	    
		//coordenadas
		int coordinateX = sv.getCoordinate().getX();
		int coordinateY = sv.getCoordinate().getY();
		int capacidade = sv.getCapacity();
		//estatisticas
		int numAcumladoLevantamento = sv.getTotalGets();
		int numAcumladoEntregas = sv.getTotalReturns();
		//estado atual
		int numBicicletasDisponiveis = sv.getAvailableBiclas();
		int numDocasLivres = sv.getFreeDocks();
		
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-|Coordenadas:");
		System.out.println("|-| - X: " + coordinateX);
		System.out.println("|-| - Y: " + coordinateY);
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-|Estatisticas:");
		System.out.println("|-| - Nº total levantamentos: " + numAcumladoLevantamento);
		System.out.println("|-| - Nº total entregas: " + numAcumladoEntregas);
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-|Estado atual:");
		System.out.println("|-| - Nº cicicletas disponiveis: " + numBicicletasDisponiveis);
		System.out.println("|-| - Nº docas livres: " + numDocasLivres);
		System.out.println("|-|------------------------------------------------|-|");
		selecionarOperacao();
	}	
	
	public void listarEstacoes() throws IOException, InvalidStation_Exception, EmailExists_Exception, InvalidEmail_Exception, UserNotExists_Exception {
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-|Coordenadas:");
		System.out.print("|-| - X: ");
		String coordX = input.nextLine();
		System.out.print("|-| - Y: ");
		String coordY = input.nextLine();
		System.out.print("|-| - Qtd estações: ");
		String qtdStations = input.nextLine();
		
		CoordinatesView coordinates = new CoordinatesView();
		coordinates.setX(Integer.parseInt(coordX));
		coordinates.setY(Integer.parseInt(coordY));

		List<StationView> listStations = port.listStations(Integer.parseInt(qtdStations), coordinates);
			
		if(!listStations.equals(null)) {
			System.out.println("|-|------------------------------------------------|-|");
			System.out.println("|-|Estações:");
			
			for(StationView sv : listStations) {
				System.out.println("|-|-> " + sv.getId());
			}
			System.out.println("|-|------------------------------------------------|-|");
			System.out.println("|-| Estações carregadas com sucesso.");
			System.out.println("|-|------------------------------------------------|-|");
		} else {
			System.out.println("|-|------------------------------------------------|-|");
			System.out.println("|-| Coordenada incorreta ou não existe. Tente novamente.");
			System.out.println("|-|------------------------------------------------|-|");
		}	
		selecionarOperacao();	
	}
	
	public void obterSaldo() throws UserNotExists_Exception, IOException, InvalidStation_Exception, EmailExists_Exception, InvalidEmail_Exception {
		
		int saldo = port.getCredit(this.user.getEmail());
		System.out.println("|-|------------------------------------------------|-|");
		System.out.println("|-| Saldo: " + saldo);
		System.out.println("|-|------------------------------------------------|-|");
		selecionarOperacao();
		
	}
	
	public void levantarBicla() throws AlreadyHasBicla_Exception, InvalidStation_Exception, NoBiclaAvail_Exception, NoCredit_Exception, UserNotExists_Exception, IOException, EmailExists_Exception, InvalidEmail_Exception {
		if(!this.user.isHasBicla()) {
			System.out.println("|-|------------------------------------------------|-|");
			System.out.print("|-|Nome estação: ");
			String idStation = input.nextLine();
			this.user.setHasBicla(true);
			port.rentBicla(idStation, this.user.getEmail());
			System.out.println("|-|------------------------------------------------|-|");
			System.out.println("|-| Reservou uma bicla com sucesso");
			System.out.println("|-|------------------------------------------------|-|");
		}
		else {
			System.out.println("|-|------------------------------------------------|-|");
			System.out.println("|-| Ja tem bicla reservada");
			System.out.println("|-|------------------------------------------------|-|");
		}
			selecionarOperacao();
	}
	//********* Fim Acrescentado pelo grupo	
	// test control operations ------------------------------------------------
	
	public void entregarBicla() throws AlreadyHasBicla_Exception, InvalidStation_Exception, NoBiclaAvail_Exception, NoCredit_Exception, UserNotExists_Exception, IOException, EmailExists_Exception, InvalidEmail_Exception {
		try {
			if(this.user.isHasBicla()) {
				System.out.println("|-|------------------------------------------------|-|");
				System.out.print("|-|Nome estação: ");
				String idStation = input.nextLine();
				port.returnBicla(idStation, this.user.getEmail());
				System.out.println("|-|------------------------------------------------|-|");
				System.out.println("|-| Devolveu uma bicla com sucesso");
				System.out.println("|-|------------------------------------------------|-|");
				this.user.setHasBicla(false);
			}else {
				System.out.println("|-|------------------------------------------------|-|");
				System.out.println("|-| Não tem bicla para devolver");
				System.out.println("|-|------------------------------------------------|-|");
			}
				
			
		} catch (FullStation_Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoBiclaRented_Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		selecionarOperacao();
	}
	 @Override
	 public String testPing(String inputMessage) {
		 return port.testPing(inputMessage);
	 }
	
	 @Override
	 public void testClear() {
		 port.testClear();
	 }
	
	 @Override
	 public void testInitStation(String stationId, int x, int y, int capacity, int
		 returnPrize)
		 throws BadInit_Exception {
		 port.testInitStation(stationId, x, y, capacity, returnPrize);
	 }
	
	 @Override
	 public void testInit(int userInitialPoints) throws BadInit_Exception {
		 port.testInit(userInitialPoints);
	 }

}
